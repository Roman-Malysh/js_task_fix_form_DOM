{"version":3,"sources":["scripts/main.js"],"names":["document","querySelectorAll","inputs","fields","splitter","text","res","toLowerCase","split","join","map","elem","index","placeholder","name","insertAdjacentHTML"],"mappings":";AAAA,aAqBA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAnBoBA,IAAAA,EAAAA,SAASC,iBAAiB,SAmB9C,EAAA,EAAA,GAnBUC,EAAAA,EAAAA,MAAAA,GAEUF,EAAAA,SAASC,iBAAiB,UAiB9C,EAAA,EAAA,GAjBUE,EAAAA,EAAAA,MAAAA,GAEV,SAASC,EAASC,GACZC,IAAAA,EAAMD,EACNA,OAAAA,IAASA,EAAKE,cACHD,EAAIE,MAAM,aAAaC,KAAK,KAKpCJ,EAGT,EAAIH,GAAQQ,IAAI,SAACC,EAAMC,GACrBD,EAAKE,YAAcT,EAASO,EAAKG,QAGnC,EAAIX,GAAQO,IAAI,SAACC,EAAMC,GACrBD,EAAKI,mBAAmB,aACpBX,2DAAAA,OAAAA,EAASF,EAAOU,GAAOE,MAD3B","file":"main.aee89e47.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst [...inputs] = document.querySelectorAll('input');\n\nconst [...fields] = document.querySelectorAll('.field');\n\nfunction splitter(text) {\n  let res = text;\n  if (text !== text.toLowerCase()) {\n    const word = res.split(/(?=[A-Z])/).join(' ');\n\n    return word;\n  }\n\n  return text;\n}\n\n[...inputs].map((elem, index) => {\n  elem.placeholder = splitter(elem.name);\n});\n\n[...fields].map((elem, index) => {\n  elem.insertAdjacentHTML('afterbegin', `<label for=\"inputs[index].id\" class=\"field-label\">\n    ${splitter(inputs[index].name)}\n    </label>`);\n});\n"]}